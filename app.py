# -*- coding: utf-8 -*-

import streamlit as st
from google.cloud import translate_v2 as translate
from google.oauth2 import service_account
import time

# --- ‡∂Ö‡∂¥‡∑ö ‡∂∏‡∑ú‡∑Ö‡∑Ä‡∂Ω‡∑ä ‡∂≠‡∑î‡∂±‡∂∏ ---
from knowledge_base import correction_rules
from intelligent_rules import apply_intelligent_rules
from creative_rules import apply_creative_rules

def get_dialogue(block_text):
    """SRT ‡∂∂‡∑ä‡∂Ω‡∑ú‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä ‡∂Ø‡∑ô‡∂∂‡∑É ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª ‡∂ú‡∂±‡∑ì"""
    lines = block_text.strip().splitlines()
    if len(lines) > 2:
        dialogue = "\n".join(lines[2:])
        # ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑ä‡∂≠‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂á‡∂≠‡∑í ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä ‡∂¥‡∂∏‡∂´‡∑í
        if any(c.isalpha() for c in dialogue):
            return dialogue
    return None

def process_srt_content(english_content):
    try:
        st.info("Google Cloud ‡∂ë‡∂±‡∑ä‡∂¢‡∑í‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
        credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_service_account"])
        translate_client = translate.Client(credentials=credentials)
        st.success("Google Cloud ‡∑É‡∂∏‡∂ú ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫.")

        blocks = english_content.strip().split('\n\n')
        
        # --- ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä ‡∑É‡∑Ñ ‡∂í‡∑Ä‡∑è‡∂∫‡∑ö ‡∂∏‡∑î‡∂Ω‡∑ä ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑É‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂ö‡∂ª ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ---
        dialogues_to_translate = {i: get_dialogue(block) for i, block in enumerate(blocks) if get_dialogue(block)}
        
        st.info(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä {len(dialogues_to_translate)}‡∂ö‡∑ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.")
        
        translated_dialogues = {} # ‡∑Ñ‡∑í‡∑É‡∑ä dictionary ‡∂ë‡∂ö‡∂ö‡∑ä
        if dialogues_to_translate:
            dialogue_list = list(dialogues_to_translate.values())
            original_indices = list(dialogues_to_translate.keys())

            progress_bar = st.progress(0)
            status_text = st.empty()

            batch_size = 128
            all_translated_texts = []

            for i in range(0, len(dialogue_list), batch_size):
                batch = dialogue_list[i:i + batch_size]
                results = translate_client.translate(batch, target_language='si', format_='text')
                all_translated_texts.extend([res['translatedText'] for res in results])
                
                processed_count = i + len(batch)
                progress_percentage = min(int((processed_count / len(dialogue_list)) * 100), 100)
                status_text.text(f"‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä {len(dialogue_list)}‡∂±‡∑ä {min(processed_count, len(dialogue_list))}‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì... ({progress_percentage}%)")
            
            # ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑Ä‡∑ñ ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä, ‡∂∏‡∑î‡∂Ω‡∑ä ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑É‡∂∏‡∂ü ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            for i, original_index in enumerate(original_indices):
                translated_dialogues[original_index] = all_translated_texts[i]

            status_text.success("‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑í! ‡∂Ø‡∑ê‡∂±‡∑ä AI ‡∂∏‡∑ú‡∑Ö‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ö...")
            time.sleep(1)
        
        final_blocks = list(blocks)
        for index, raw_translated in translated_dialogues.items():
            header_lines = final_blocks[index].strip().splitlines()[:2]
            header = "\n".join(header_lines)
            
            knowledge_applied = raw_translated
            for bad, good in correction_rules.items():
                knowledge_applied = knowledge_applied.replace(bad, good)

            intelligent_applied = "\n".join([apply_intelligent_rules(line) for line in knowledge_applied.splitlines()])
            creative_applied = apply_creative_rules(intelligent_applied)
            
            final_blocks[index] = header + '\n' + creative_applied

        st.success("‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ AI ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä!")
        return "\n\n".join(final_blocks)

    except Exception as e:
        st.error(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂∂‡∂ª‡∂¥‡∂≠‡∂Ω ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")
        st.code(f"Error details: {str(e)}")
        return None

# ==========================================================
# UI (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂∏‡∑î‡∑Ñ‡∑î‡∂´‡∂≠)
# ==========================================================
st.set_page_config(page_title="‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫", page_icon="üìù", layout="wide")
st.title("üìù ‡∑É‡∂ª‡∂Ω ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫ v15.3 (Final Stable Engine)")
st.markdown("Google Cloud ‡∑Ñ‡∑í ‡∂±‡∑í‡∂Ω API ‡∂≠‡∑è‡∂ö‡∑ä‡∑Ç‡∂´‡∂∫ ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂∂‡∂Ω‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ô‡∂±, ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª ‡∑É‡∑Ñ ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑è‡∑É‡∑Ä‡∂±‡∑ä‡∂≠ ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂± ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫.")

# (UI ‡∂ë‡∂ö‡∑ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í ‡∂ö‡∑ú‡∂ß‡∑É ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö)
if 'translated_content' not in st.session_state: st.session_state.translated_content = None
if 'original_content' not in st.session_state: st.session_state.original_content = None
if 'file_name' not in st.session_state: st.session_state.file_name = "edited_subtitle.srt"

st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 1: ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í `.srt` ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö Upload ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
uploaded_file = st.file_uploader("‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í .srt ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±", type=['srt'])
if uploaded_file is not None:
    st.success(f"'{uploaded_file.name}' ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑ê‡∂∂‡∑î‡∂±‡∑í.")
    english_content = uploaded_file.getvalue().decode("utf-8")
    st.session_state.original_content = english_content
    st.session_state.file_name = uploaded_file.name
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 2: ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂¥‡∑ô‡∂ª‡∂Ø‡∑É‡∑î‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    if st.button("‚ú® ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"):
        with st.spinner("AI ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì..."):
            final_content = process_srt_content(english_content)
        if final_content:
            st.session_state.translated_content = final_content
            st.balloons()

if st.session_state.translated_content:
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 3: ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì‡∑Ä ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    original_blocks = st.session_state.original_content.strip().split('\n\n')
    translated_blocks = st.session_state.translated_content.strip().split('\n\n')
    min_blocks = min(len(original_blocks), len(translated_blocks))
    for i in range(min_blocks):
        col1, col2 = st.columns(2)
        with col1:
            st.text_area(f"‡∂∏‡∑î‡∂Ω‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í ‡∂Ø‡∑ô‡∂∂‡∑É #{i+1}", value=original_blocks[i], height=120, key=f"orig_{i}", disabled=True)
        with col2:
            st.text_area(f"AI ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ #{i+1} (‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö)", value=translated_blocks[i], height=120, key=f"edit_{i}")
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 4: ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    final_edited_blocks = [st.session_state[f"edit_{i}"] for i in range(min_blocks)]
    final_edited_content = "\n\n".join(final_edited_blocks)
    st.download_button(
       label="üì• ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±",
       data=final_edited_content.encode('utf-8'),
       file_name=f"edited_sinhala_{st.session_state.file_name}",
       mime="text/plain"
    )
