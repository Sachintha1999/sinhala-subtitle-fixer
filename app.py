# -*- coding: utf-8 -*-

import streamlit as st
from deep_translator import GoogleTranslator
import time

# --- ‡∂Ö‡∂¥‡∑ö ‡∂∏‡∑ú‡∑Ö‡∑Ä‡∂Ω‡∑ä ‡∂≠‡∑î‡∂±‡∂∏ ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ---
from knowledge_base import correction_rules
from intelligent_rules import apply_intelligent_rules
from creative_rules import apply_creative_rules

def process_srt_content_batched(english_content):
    # (‡∂∏‡∑ö function ‡∂ë‡∂ö‡∑ö ‡∂ö‡∑í‡∑É‡∑í‡∂∏ ‡∑Ä‡∑ô‡∂±‡∑É‡∂ö‡∑ä ‡∂±‡∑ë. ‡∂í ‡∂±‡∑í‡∑É‡∑è ‡∂í‡∂ö ‡∂ë‡∑Ñ‡∑ô‡∂∏‡∂∏ ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è)
    try:
        translator = GoogleTranslator(source='en', target='si')
        blocks = english_content.strip().split('\n\n')
        total_blocks = len(blocks)
        dialogues_to_translate = []
        for block in blocks:
            lines = block.strip().splitlines()
            if len(lines) > 2:
                dialogues_to_translate.append("\n".join(lines[2:]))
            else:
                dialogues_to_translate.append("")
        batch_size = 50
        translated_dialogues = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        for i in range(0, len(dialogues_to_translate), batch_size):
            batch = dialogues_to_translate[i:i + batch_size]
            non_empty_batch = [d for d in batch if d]
            if non_empty_batch:
                translated_batch = translator.translate_batch(non_empty_batch)
                translated_iter = iter(translated_batch)
                full_translated_batch = [next(translated_iter) if d else "" for d in batch]
                translated_dialogues.extend(full_translated_batch)
            else:
                translated_dialogues.extend([""] * len(batch))
            progress_percentage = min(int(((i + batch_size) / total_blocks) * 100), 100)
            progress_bar.progress(progress_percentage)
            status_text.text(f"‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä ‡∂ö‡∑ú‡∂ß‡∑É‡∑ä {total_blocks}‡∂±‡∑ä {min(i + batch_size, total_blocks)}‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì... ({progress_percentage}%)")
            time.sleep(0.5)
        status_text.success("‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑í! ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...")
        
        final_blocks = []
        previous_dialogue_context = ""
        for i, block in enumerate(blocks):
            lines = block.strip().splitlines()
            if len(lines) > 1:
                header = lines[0] + '\n' + lines[1]
                translated_dialogue = translated_dialogues[i]
                for bad_phrase, good_phrase in correction_rules.items():
                    if bad_phrase in translated_dialogue:
                         translated_dialogue = translated_dialogue.replace(bad_phrase, good_phrase)
                dialogue_lines = translated_dialogue.splitlines()
                intelligent_lines = [apply_intelligent_rules(line, previous_dialogue_context) for line in dialogue_lines]
                final_dialogue = "\n".join(intelligent_lines)
                creative_dialogue = apply_creative_rules(final_dialogue)
                final_block = header + '\n' + creative_dialogue
                final_blocks.append(final_block)
                previous_dialogue_context = creative_dialogue
        
        final_sinhala_srt = "\n\n".join(final_blocks)
        return final_sinhala_srt
    except Exception as e:
        st.error(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")
        return None

# ==========================================================
# UI (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂∏‡∑î‡∑Ñ‡∑î‡∂´‡∂≠) - ‡∂∏‡∑ô‡∂≠‡∂± ‡∂≠‡∂∏‡∂∫‡∑í ‡∂Ω‡∑ú‡∂ö‡∑î‡∂∏ ‡∑Ä‡∑ô‡∂±‡∑É ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∑ö
# ==========================================================
st.set_page_config(page_title="‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫", page_icon="üìù", layout="wide") # layout="wide" ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂á‡∂¥‡∑ä ‡∂ë‡∂ö ‡∂¥‡∑Ö‡∂Ω‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
st.title("üìù ‡∑É‡∂ª‡∂Ω ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫ v14.0 (‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∑è‡∂ª‡∂ö‡∂∫)")
st.markdown("‡∂î‡∂∂‡∂ú‡∑ö ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª, **‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª** ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì‡∑Ä ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑è‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂î‡∂∂‡∂ß ‡∂á‡∂≠.")

# --- Session State ‡∂ë‡∂ö‡∑ö ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
# ‡∂∏‡∑ö‡∂ö ‡∑Ñ‡∂ª‡∑í‡∂∫‡∂ß ‡∂á‡∂¥‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö ‡∂∏‡∂≠‡∂ö‡∂∫‡∂ö‡∑ä ‡∑Ä‡∂ú‡∑ö
if 'translated_content' not in st.session_state:
    st.session_state.translated_content = None
if 'original_content' not in st.session_state:
    st.session_state.original_content = None
if 'file_name' not in st.session_state:
    st.session_state.file_name = "edited_subtitle.srt"

st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 1: ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í `.srt` ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö Upload ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
uploaded_file = st.file_uploader("‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í .srt ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±", type=['srt'])

if uploaded_file is not None:
    st.success(f"'{uploaded_file.name}' ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑ê‡∂∂‡∑î‡∂±‡∑í.")
    english_content = uploaded_file.getvalue().decode("utf-8")
    st.session_state.original_content = english_content
    st.session_state.file_name = uploaded_file.name
    
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 2: ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂¥‡∑ô‡∂ª‡∂Ø‡∑É‡∑î‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    if st.button("‚ú® ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"):
        with st.spinner("AI ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì..."):
            final_content = process_srt_content_batched(english_content)
        if final_content:
            st.session_state.translated_content = final_content
            st.balloons()

# --- ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∑è‡∂ª‡∂ö‡∂∫ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂± ‡∂≠‡∑ê‡∂± ---
if st.session_state.translated_content:
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 3: ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì‡∑Ä ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    
    original_blocks = st.session_state.original_content.strip().split('\n\n')
    translated_blocks = st.session_state.translated_content.strip().split('\n\n')

    # ‡∑Ñ‡∑ê‡∂∏ ‡∂Ø‡∑ô‡∂∂‡∑É‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è‡∂∏ ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä text editor ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∑ê‡∂Ø‡∑ì‡∂∏
    for i in range(len(translated_blocks)):
        col1, col2 = st.columns(2)
        with col1:
            st.text_area("‡∂∏‡∑î‡∂Ω‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í ‡∂Ø‡∑ô‡∂∂‡∑É", value=original_blocks[i], height=150, key=f"orig_{i}", disabled=True)
        with col2:
            st.text_area("AI ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ (‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö)", value=translated_blocks[i], height=150, key=f"edit_{i}")

    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 4: ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    
    # --- ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª, download button ‡∂ë‡∂ö ‡∑Ñ‡∑ê‡∂Ø‡∑ì‡∂∏ ---
    final_edited_blocks = []
    for i in range(len(translated_blocks)):
        final_edited_blocks.append(st.session_state[f"edit_{i}"])

    final_edited_content = "\n\n".join(final_edited_blocks)
    
    st.download_button(
       label="üì• ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±",
       data=final_edited_content.encode('utf-8'),
       file_name=f"edited_sinhala_{st.session_state.file_name}",
       mime="text/plain"
    )
