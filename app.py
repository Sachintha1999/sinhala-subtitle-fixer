# -*- coding: utf-8 -*-

import streamlit as st
from deep_translator import GoogleTranslator
import time

# --- ‡∂Ö‡∂¥‡∑ö ‡∂∏‡∑ú‡∑Ö‡∑Ä‡∂Ω‡∑ä ‡∂Ø‡∑ô‡∂ö‡∂∏ ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ---
from knowledge_base import correction_rules      # ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫ (Library)
from intelligent_rules import apply_intelligent_rules # ‡∂ë‡∂±‡∑ä‡∂¢‡∑í‡∂±‡∑ä ‡∂ö‡∑è‡∂∏‡∂ª‡∂∫ (Engine Room)

def process_srt_content_batched(english_content):
    """
    ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂± ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫.
    """
    try:
        translator = GoogleTranslator(source='en', target='si')
        blocks = english_content.strip().split('\n\n')
        total_blocks = len(blocks)
        dialogues_to_translate = []
        for block in blocks:
            lines = block.strip().splitlines()
            if len(lines) > 2:
                dialogues_to_translate.append("\n".join(lines[2:]))
            else:
                dialogues_to_translate.append("")
        batch_size = 50
        translated_dialogues = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        for i in range(0, len(dialogues_to_translate), batch_size):
            batch = dialogues_to_translate[i:i + batch_size]
            non_empty_batch = [d for d in batch if d]
            if non_empty_batch:
                translated_batch = translator.translate_batch(non_empty_batch)
                translated_iter = iter(translated_batch)
                full_translated_batch = [next(translated_iter) if d else "" for d in batch]
                translated_dialogues.extend(full_translated_batch)
            else:
                translated_dialogues.extend([""] * len(batch))
            progress_percentage = min(int(((i + batch_size) / total_blocks) * 100), 100)
            progress_bar.progress(progress_percentage)
            status_text.text(f"‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä ‡∂ö‡∑ú‡∂ß‡∑É‡∑ä {total_blocks}‡∂±‡∑ä {min(i + batch_size, total_blocks)}‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì... ({progress_percentage}%)")
            time.sleep(0.5)
        status_text.success("‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑í! ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...")
        
        # --- ‡∂∏‡∑ú‡∑Ö‡∑Ä‡∂Ω‡∑ä ‡∂Ø‡∑ô‡∂ö‡∑ô‡∂±‡∑ä‡∂∏ ‡∑Ä‡∑ê‡∂© ‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂≠‡∑ê‡∂± ---
        final_blocks = []
        for i, block in enumerate(blocks):
            lines = block.strip().splitlines()
            if len(lines) > 1:
                header = lines[0] + '\n' + lines[1]
                translated_dialogue = translated_dialogues[i]
                
                # 1. ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫‡∑ô‡∂±‡∑ä (knowledge_base) ‡∂∏‡∂≠‡∂ö‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                for bad_phrase, good_phrase in correction_rules.items():
                    if bad_phrase in translated_dialogue:
                         translated_dialogue = translated_dialogue.replace(bad_phrase, good_phrase)
                
                # 2. ‡∂ë‡∂±‡∑ä‡∂¢‡∑í‡∂±‡∑ä ‡∂ö‡∑è‡∂∏‡∂ª‡∂∫‡∑ô‡∂±‡∑ä (intelligent_rules) ‡∂≠‡∂ª‡∑ä‡∂ö‡∂±‡∂∫ ‡∂∫‡∑ô‡∂Ø‡∑ì‡∂∏
                dialogue_lines = translated_dialogue.splitlines()
                intelligent_lines = [apply_intelligent_rules(line) for line in dialogue_lines]
                final_dialogue = "\n".join(intelligent_lines)

                final_block = header + '\n' + final_dialogue
                final_blocks.append(final_block)

        final_sinhala_srt = "\n\n".join(final_blocks)
        return final_sinhala_srt
    except Exception as e:
        st.error(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")
        return None

# ==========================================================
# UI (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂∏‡∑î‡∑Ñ‡∑î‡∂´‡∂≠) - ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂á‡∂≠‡∑ä‡∂≠‡∑ö ‡∂¥‡∑ô‡∂±‡∑î‡∂∏ ‡∂¥‡∂∏‡∂´‡∑í
# ==========================================================
st.set_page_config(page_title="‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫", page_icon="üìù")
st.title("üìù ‡∑É‡∂ª‡∂Ω ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫ v10.0 (Modular Brain)")
st.markdown("‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂Ø‡∑í‡∂∫‡∑î‡∂´‡∑î ‡∑Ä‡∂± **‡∑Å‡∂∂‡∑ä‡∂Ø‡∂ö‡∑ù‡∑Ç‡∂∫** ‡∑É‡∑Ñ **‡∂∂‡∑î‡∂Ø‡∑ä‡∂∞‡∑í‡∂∏‡∂≠‡∑ä ‡∂ª‡∑ì‡∂≠‡∑í ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫** ‡∂∫‡∂± ‡∂Ø‡∑ô‡∂ö‡∂∏ ‡∂∏‡∂ú‡∑í‡∂±‡∑ä, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∑É‡∑ä‡∑Ä‡∂∑‡∑è‡∑Ä‡∑í‡∂ö ‡∂Ω‡∑ô‡∑É ‡∑É‡∂ö‡∑É‡∂±‡∑î ‡∂á‡∂≠.")

st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 1: ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í `.srt` ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö Upload ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
uploaded_file = st.file_uploader("‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í .srt ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±", type=['srt'])
if uploaded_file is not None:
    st.success(f"'{uploaded_file.name}' ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑ê‡∂∂‡∑î‡∂±‡∑í.")
    english_content = uploaded_file.getvalue().decode("utf-8")
    st.subheader("‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 2: ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    if st.button("‚ú® ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"):
        final_content = process_srt_content_batched(english_content)
        if final_content:
            st.balloons()
            st.subheader("‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫: ‡∑É‡∂ö‡∑É‡∂± ‡∂Ω‡∂Ø ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö Download ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±")
            st.download_button(
               label="üì• ‡∑É‡∂ö‡∑É‡∂± ‡∂Ω‡∂Ø ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±",
               data=final_content.encode('utf-8'),
               file_name=f"fixed_sinhala_{uploaded_file.name}",
               mime="text/plain"
            )
