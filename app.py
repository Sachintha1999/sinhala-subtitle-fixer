# -*- coding: utf-8 -*-

import streamlit as st
from deep_translator import GoogleTranslator
import time
import re

# --- ‡∂Ö‡∂¥‡∑ö ‡∂∏‡∑ú‡∑Ö‡∑Ä‡∂Ω‡∑ä ‡∂≠‡∑î‡∂±‡∂∏ ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ---
from knowledge_base import correction_rules
from intelligent_rules import apply_intelligent_rules
from creative_rules import apply_creative_rules

def process_srt_content_batched(english_content):
    try:
        # --- ‡∑Ä‡∑í‡∂∏‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ 1: ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂≠‡∑ä‡∂≠‡∑è ---
        st.info("AI ‡∂ë‡∂±‡∑ä‡∂¢‡∑í‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫...")

        translator = GoogleTranslator(source='en', target='si')
        blocks = english_content.strip().split('\n\n')
        
        dialogues_to_translate = []
        block_indices_to_translate = []
        for i, block in enumerate(blocks):
            lines = block.strip().splitlines()
            if len(lines) > 2:
                dialogues_to_translate.append("\n".join(lines[2:]))
                block_indices_to_translate.append(i)

        # --- ‡∑Ä‡∑í‡∂∏‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ 2: ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä ‡∂ú‡∂´‡∂± ---
        st.info(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ø‡∑ô‡∂∂‡∑É‡∑ä {len(dialogues_to_translate)}‡∂ö‡∑ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.")
        
        translated_dialogues_list = translator.translate_batch(dialogues_to_translate)
        
        # --- ‡∑Ä‡∑í‡∂∏‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ 3: ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑É‡∑î ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂ú‡∂´‡∂± ---
        st.info(f"Google Translate ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω {len(translated_dialogues_list)}‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑î‡∂±‡∑ä‡∂±‡∑è.")
        
        final_blocks = list(blocks)
        translated_iter = iter(translated_dialogues_list)

        for index in block_indices_to_translate:
            lines = final_blocks[index].strip().splitlines()
            header = lines[0] + '\n' + lines[1]
            translated_dialogue = next(translated_iter)
            
            original_google_trans = translated_dialogue # ‡∂∏‡∑î‡∂Ω‡∑ä ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂∏‡∂≠‡∂ö ‡∂≠‡∑í‡∂∫‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
            
            # 1. ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∂∫‡∂≠ ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            for bad_phrase, good_phrase in correction_rules.items():
                if bad_phrase in translated_dialogue:
                     translated_dialogue = translated_dialogue.replace(bad_phrase, good_phrase)
            
            # --- ‡∑Ä‡∑í‡∂∏‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ 4: intelligent_rules ‡∂∫‡∑ô‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∑É‡∑Ñ ‡∂¥‡∑É‡∑î ---
            dialogue_lines = translated_dialogue.splitlines()
            intelligent_lines = []
            for line in dialogue_lines:
                before_intelligent = line
                after_intelligent = apply_intelligent_rules(line)
                # ‡∑Ä‡∑ô‡∂±‡∑É‡∂ö‡∑ä ‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∑Ä‡∑í‡∂≠‡∂ª‡∂ö‡∑ä message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂±‡∑ä‡∂±
                if before_intelligent != after_intelligent:
                    st.success(f"Intelligent Rule ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑í‡∂∫! '{before_intelligent}' -> '{after_intelligent}'")
                intelligent_lines.append(after_intelligent)

            final_dialogue = "\n".join(intelligent_lines)

            # 3. ‡∂ö‡∂Ω‡∑è‡∂ö‡∂ª‡∑î‡∑Ä‡∑è‡∂ú‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂´‡∑Å‡∑ì‡∂Ω‡∑ì ‡∂∂‡∑Ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            creative_dialogue = apply_creative_rules(final_dialogue)
            
            final_blocks[index] = header + '\n' + creative_dialogue
        
        st.info("‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä.")
        return "\n\n".join(final_blocks)

    except Exception as e:
        st.error(f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂∂‡∂ª‡∂¥‡∂≠‡∂Ω ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")
        return None

# ==========================================================
# UI (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂∏‡∑î‡∑Ñ‡∑î‡∂´‡∂≠) - ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑ô‡∂±‡∑É‡∂ö‡∑ä ‡∂±‡∑ë
# ==========================================================
st.set_page_config(page_title="‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫", page_icon="üìù", layout="wide")
st.title("üìù ‡∑É‡∂ª‡∂Ω ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂ö‡∑É‡∂±‡∂∫ v14.4 (‡∑Ä‡∑í‡∂∏‡∂ª‡∑ä‡∑Å‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂ö‡∑è‡∂ª‡∂∫)")

if 'translated_content' not in st.session_state:
    st.session_state.translated_content = None
if 'original_content' not in st.session_state:
    st.session_state.original_content = None
if 'file_name' not in st.session_state:
    st.session_state.file_name = "edited_subtitle.srt"

uploaded_file = st.file_uploader("‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í .srt ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±", type=['srt'])

if uploaded_file is not None:
    english_content = uploaded_file.getvalue().decode("utf-8")
    st.session_state.original_content = english_content
    st.session_state.file_name = uploaded_file.name
    
    if st.button("‚ú® ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"):
        st.session_state.translated_content = process_srt_content_batched(english_content)
        if st.session_state.translated_content:
            st.balloons()

if st.session_state.translated_content:
    st.subheader("‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∑è‡∂ª‡∂ö‡∂∫")
    
    original_blocks = st.session_state.original_content.strip().split('\n\n')
    translated_blocks = st.session_state.translated_content.strip().split('\n\n')
    min_blocks = min(len(original_blocks), len(translated_blocks))

    for i in range(min_blocks):
        col1, col2 = st.columns(2)
        with col1:
            st.text_area("‡∂∏‡∑î‡∂Ω‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í", value=original_blocks[i], height=100, key=f"orig_{i}", disabled=True)
        with col2:
            st.text_area("AI ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫", value=translated_blocks[i], height=100, key=f"edit_{i}")
    
    st.subheader("‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±")
    final_edited_blocks = [st.session_state[f"edit_{i}"] for i in range(min_blocks)]
    final_edited_content = "\n\n".join(final_edited_blocks)
    st.download_button("üì• ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±", data=final_edited_content.encode('utf-8'), file_name=f"edited_sinhala_{st.session_state.file_name}")
